name: set-default-matrix

on:
  workflow_call:
    outputs:
      matrix:
        description: 'Default matrix for compatibility tests'
        value: ${{ jobs.set-matrix.outputs.matrix }}

jobs:
  set-matrix:
    name: Set default version matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Download get-version tool
        shell: bash
        run: |
          set -euo pipefail
          curl -sSLo /tmp/get-version.zip https://github.com/scylladb-actions/get-version/releases/download/v0.3.0/get-version_0.3.0_linux_amd64v3.zip
          unzip -o /tmp/get-version.zip -d /tmp >/dev/null
          chmod +x /tmp/get-version
          /tmp/get-version -version || true

      - name: Set default matrix
        id: set-matrix
        run: |
          MATRIX='[
            {"kafka_provider": "confluent", "provider_version": "LAST.LAST.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "confluent", "provider_version": "LAST.LAST.LAST", "kafka_connect_mode": "standalone", "scylla_version": "latest"},
            {"kafka_provider": "confluent", "provider_version": "8.0.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "confluent", "provider_version": "7.9.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "confluent", "provider_version": "7.8.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "confluent", "provider_version": "7.7.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "confluent", "provider_version": "7.6.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "apache", "provider_version": "4.LAST.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "apache", "provider_version": "3.LAST.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "apache", "provider_version": "LAST.LAST.LAST", "kafka_connect_mode": "distributed", "scylla_version": "latest"},
            {"kafka_provider": "apache", "provider_version": "LAST.LAST.LAST", "kafka_connect_mode": "standalone", "scylla_version": "latest"}
          ]'
          echo "::group::Original Matrix (with filter patterns)"; echo "$MATRIX" | jq '.'; echo "::endgroup::"

          RESOLVED_ENTRIES=()
          echo "::group::Version Resolution Process"
          while IFS= read -r entry; do
            PROVIDER=$(echo "$entry" | jq -r '.kafka_provider')
            PATTERN=$(echo "$entry" | jq -r '.provider_version')
            MODE=$(echo "$entry" | jq -r '.kafka_connect_mode')
            SCYLLA=$(echo "$entry" | jq -r '.scylla_version')

            if [ "$PROVIDER" = "confluent" ]; then
              REPO="confluentinc/cp-kafka"
            else
              REPO="apache/kafka"
            fi

            echo "Resolving: provider=$PROVIDER, connect_mode=$MODE, pattern=$PATTERN, repo=$REPO"
            if ! VERSION=$(/tmp/get-version -source dockerhub-imagetag -repo "$REPO" -filters "$PATTERN"); then
              echo "::error::Resolution command failed for $PROVIDER pattern $PATTERN" >&2
              exit 1
            fi
            VERSION=$(echo "$VERSION" | tr -d '\r')
            if [ -z "$VERSION" ]; then
              echo "::error::Empty version resolved for $PROVIDER pattern $PATTERN" >&2
              exit 1
            fi
            echo "  âœ“ Resolved to: $VERSION"; echo

            RESOLVED_ENTRY=$(jq -n \
              --arg provider "$PROVIDER" \
              --arg version "$VERSION" \
              --arg mode "$MODE" \
              --arg scylla "$SCYLLA" \
              '{kafka_provider: $provider, provider_version: $version, kafka_connect_mode: $mode, scylla_version: $scylla}')
            RESOLVED_ENTRIES+=("$RESOLVED_ENTRY")
          done < <(echo "$MATRIX" | jq -c '.[]')
          echo "::endgroup::"

          RESOLVED_MATRIX=$(printf '%s\n' "${RESOLVED_ENTRIES[@]}" | jq -s '.')
          echo "::group::Resolved Matrix (before deduplication)"; echo "$RESOLVED_MATRIX" | jq '.'; echo "::endgroup::"

          DEDUPLICATED_MATRIX=$(echo "$RESOLVED_MATRIX" | jq -c 'reduce .[] as $i ([]; if any(.[]; . == $i) then . else . + [$i] end)')
          echo "::group::Final Matrix (after deduplication)"; echo "$DEDUPLICATED_MATRIX" | jq '.'; echo "::endgroup::"

          echo "matrix=$DEDUPLICATED_MATRIX" >> "$GITHUB_OUTPUT"
